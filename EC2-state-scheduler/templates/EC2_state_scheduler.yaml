AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for auto stop and start RDS instances'
#
# Metadata
#
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: CloudWatch Events Configuration
      Parameters:
      - StartSchedule
      - StopSchedule
    - Label:
        default: Lambda Configuration
      Parameters:
      - TagKey
      - TagValue
#
# Parameters
#
Parameters:
  StartSchedule:
    Description: Start Datetime format cron
    Default: 0 23 ? * MON-FRI *
    Type: String
  StopSchedule:
    Description: 'Stop Datetime format cron'
    Default: 0 11 ? * MON-FRI *
    Type: String
  TagKey:
    Description: Target RDS Tag Key
    Default: state-scheduler
    Type: String
  TagValue:
    Description: Target RDS Tag Value
    Default: "True"
    Type: String
#
# Resources
#
Resources:
  StateSchedulerExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: LambdaExecPolicy
        PolicyDocument:
          Statement:
          - Sid: AccessToCWLog
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"
          - Sid: AccessToInstance
            Effect: Allow
            Action:
            - rds:DescribeDBInstances
            - rds:StartDBInstance
            - rds:StopDBInstance
            - rds:ListTagsForResource
            Resource: "*"
  StartScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: ScheduledRule For Start RDS Instance
      ScheduleExpression: !Sub cron(${StartSchedule})
      State: ENABLED
      Targets:
      - Arn: !GetAtt [ StateSchedulerFunction, Arn ]
        Id: StateSchedulerFunction
  StopScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: ScheduledRule For Stop RDS Instance
      ScheduleExpression: !Sub cron(${StopSchedule})
      State: ENABLED
      Targets:
      - Arn: !GetAtt [ StateSchedulerFunction, Arn ]
        Id: StateSchedulerFunction
  PermissionForStartEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref StateSchedulerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt [ StartScheduledRule, Arn ]
  PermissionForStopEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref StateSchedulerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt [ StopScheduledRule, Arn ]
  StateSchedulerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          TagKey: !Ref TagKey
          TagValue: !Ref TagValue
      Description: Scheduled RDS Stop And Start.
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt [ StateSchedulerExecRole, Arn ]
      Runtime: python3.6
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import os
          import logging
          logger = logging.getLogger(__name__)
          logger.setLevel(logging.INFO)

          TAG_KEY = os.environ['TagKey']
          TAG_VALUE = os.environ['TagValue']
          RDS = boto3.client('rds')

          def get_target_rds_instances():
              instances = RDS.describe_db_instances()
              return [
                  i for i in instances['DBInstances']
                  for tag in RDS.list_tags_for_resource(ResourceName=i['DBInstanceArn'])['TagList']
                  if tag['Key'] == TAG_KEY and tag['Value'] == TAG_VALUE
              ]

          def schedule_rds(event):
              rds_instances = get_target_rds_instances()
              logger.info("Target RDS instances: \n%s" % str(
                  [(i['DBInstanceIdentifier']) for i in rds_instances]
              ))

              if [ r for r in event.get('resources') if r.count('StartScheduledRule') ]:
                  logger.info('Start RDS instances')
                  for instance in rds_instances:
                      if instance['DBInstanceStatus'] == 'stopped':
                          logger.info(RDS.start_db_instance(DBInstanceIdentifier=instance['DBInstanceIdentifier']))
                      else:
                          logger.info('{} status is not "stopped"'.format(instance['DBInstanceIdentifier']))
              elif [ r for r in event.get('resources') if r.count('StopScheduledRule') ]:
                  logger.info('Stop RDS instances')
                  for instance in rds_instances:
                      if instance['DBInstanceStatus'] == 'available':
                          logger.info(RDS.stop_db_instance(DBInstanceIdentifier=instance['DBInstanceIdentifier']))
                      else:
                          logger.info('{} status is not "available"'.format(instance['DBInstanceIdentifier']))


          def lambda_handler(event, context):
              logger.info('Started')
              schedule_rds(event)
              logger.info('Complete')
